// Generated by CoffeeScript 1.8.0
(function() {
  var Card, api;

  api = require("../Utilites/trelloAPI");

  module.exports = Card = (function() {
    function Card(cardData, board) {
      var labelId, memberId, _i, _j, _len, _len1, _ref, _ref1;
      this.board = board;
      this.id = cardData.id;
      this.name = this.text = cardData.name;
      this.desc = cardData.desc;
      this.members = [];
      this.labels = [];
      this.trelloObj = cardData;
      _ref = cardData.idMembers;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        memberId = _ref[_i];
        this.members.push(this.board.getMember(memberId));
      }
      _ref1 = cardData.idLabels;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        labelId = _ref1[_j];
        this.labels.push(this.board.getLabel(labelId));
      }
    }

    Card.prototype.getParent = function() {
      return this.board.getList(this.trelloObj.idList);
    };

    Card.prototype.getMember = function(id) {
      var member, _i, _len, _ref;
      if (typeof id === "string") {
        _ref = this.members;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          member = _ref[_i];
          if (member.id === id) {
            return member;
          }
        }
        return void 0;
      }
      return this.members[id];
    };

    Card.prototype.getMemberByUsername = function(username) {
      var member, _i, _len, _ref;
      _ref = this.members;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        member = _ref[_i];
        if (member.username === username) {
          return member;
        }
      }
      return void 0;
    };

    Card.prototype.eachMember = function(eachFunc) {
      var member, _i, _len, _ref;
      _ref = this.members;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        member = _ref[_i];
        eachFunc(member);
      }
      return this;
    };

    Card.prototype.getLabel = function(id) {
      var label, _i, _len, _ref;
      if (typeof id === "string") {
        _ref = this.labels;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          label = _ref[_i];
          if (label.id === id) {
            return label;
          }
        }
        return void 0;
      }
      return this.labels[id];
    };

    Card.prototype.getLabelByColor = function(color) {
      var label, _i, _len, _ref;
      _ref = this.labels;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        label = _ref[_i];
        if (label.color === color) {
          return label;
        }
      }
      return void 0;
    };

    Card.prototype.getLabelByName = function(name) {
      var label, _i, _len, _ref;
      _ref = this.labels;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        label = _ref[_i];
        if (label.name === name) {
          return label;
        }
      }
      return void 0;
    };

    Card.prototype.eachLabel = function(eachFunc) {
      var label, _i, _len, _ref;
      _ref = this.labels;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        label = _ref[_i];
        eachFunc(label);
      }
      return this;
    };

    Card.prototype.setName = function(text, onSuccess) {
      var API;
      if (onSuccess == null) {
        onSuccess = function() {};
      }
      API = new api("/cards/" + this.id, {
        name: text
      });
      API.run("PUT", (function(_this) {
        return function() {
          return _this.board.refresh(function() {
            return onSuccess();
          });
        };
      })(this));
      return this;
    };

    Card.prototype.setText = function(text, onSuccess) {
      return this.setName(text, onSuccess);
    };

    Card.prototype.setDescription = function(desc, onSuccess) {
      var API;
      if (onSuccess == null) {
        onSuccess = function() {};
      }
      API = new api("/cards/" + this.id, {
        desc: desc
      });
      API.run("PUT", (function(_this) {
        return function() {
          return _this.board.refresh(function() {
            return onSuccess();
          });
        };
      })(this));
      return this;
    };

    Card.prototype.moveTo = function(newList, onSuccess) {
      var API;
      if (onSuccess == null) {
        onSuccess = function() {};
      }
      API = new api("/cards/" + this.id, {
        idList: newList.id
      });
      API.run("PUT", (function(_this) {
        return function() {
          return _this.board.refresh(function() {
            return onSuccess();
          });
        };
      })(this));
      return this;
    };

    Card.prototype.remove = function(onSuccess) {
      var API;
      if (onSuccess == null) {
        onSuccess = function() {};
      }
      API = new api("/cards/" + this.id);
      API.run("DELETE", (function(_this) {
        return function() {
          return _this.board.refresh(function() {
            return onSuccess();
          });
        };
      })(this));
      return this;
    };

    Card.prototype.archive = function(onSuccess) {
      var API;
      if (onSuccess == null) {
        onSuccess = function() {};
      }
      API = new api("/cards/" + this.id + "/closed", {
        value: true
      });
      API.run("PUT", (function(_this) {
        return function() {
          return _this.board.refresh(function() {
            return onSuccess();
          });
        };
      })(this));
      return this;
    };

    Card.prototype.addMember = function(member, onSuccess) {
      var API, membersStr, _i, _len, _member, _ref;
      if (onSuccess == null) {
        onSuccess = function() {};
      }
      if (typeof member === "string") {
        member = {
          id: member
        };
      }
      membersStr = "";
      _ref = this.members;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        _member = _ref[_i];
        membersStr += "" + _member.id + ",";
      }
      membersStr += member.id;
      API = new api("/cards/" + this.id, {
        idMembers: membersStr
      });
      API.run("PUT", (function(_this) {
        return function() {
          return _this.board.refresh(function() {
            return onSuccess();
          });
        };
      })(this));
      return this;
    };

    Card.prototype.removeMember = function(member, onSuccess) {
      var API, membersStr, _i, _len, _member, _ref;
      if (onSuccess == null) {
        onSuccess = function() {};
      }
      if (typeof member === "string") {
        member = {
          id: member
        };
      }
      membersStr = "";
      _ref = this.members;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        _member = _ref[_i];
        membersStr += "" + _member.id + ",";
      }
      if (membersStr.indexOf(member.id !== -1)) {
        membersStr = membersStr.replace(member.id + ',', '').replace(member.id, '');
        API = new api("/cards/" + this.id, {
          idMembers: membersStr
        });
        API.run("PUT", (function(_this) {
          return function() {
            return _this.board.refresh(function() {
              return onSuccess();
            });
          };
        })(this));
      }
      return this;
    };

    Card.prototype.addLabel = function(label, onSuccess) {
      var API;
      if (onSuccess == null) {
        onSuccess = function() {};
      }
      API = new api("/cards/" + this.id + "/idLabels", {
        value: label.id
      });
      API.run("POST", (function(_this) {
        return function() {
          return _this.board.refresh(function() {
            return onSuccess();
          });
        };
      })(this));
      return this;
    };

    Card.prototype.removeLabel = function(label, onSuccess) {
      var API;
      if (onSuccess == null) {
        onSuccess = function() {};
      }
      API = new api("/cards/" + this.id + "/idLabels", {
        idLabel: label.id
      });
      API.run("DELETE", (function(_this) {
        return function() {
          return _this.board.refresh(function() {
            return onSuccess();
          });
        };
      })(this));
      return this;
    };

    return Card;

  })();

}).call(this);
