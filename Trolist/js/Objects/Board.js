// Generated by CoffeeScript 1.8.0
(function() {
  var Board, Label, List, Member, api;

  api = require("../Utilites/trelloAPI");

  List = require("./List");

  Member = require("./Member");

  Label = require("./Label");

  module.exports = Board = (function() {
    function Board(boardData, onReady) {
      var labelData, memberData, _i, _j, _len, _len1, _ref, _ref1;
      this.id = boardData.id;
      this.name = boardData.name;
      this.lists = [];
      this.members = [];
      this.labels = [];
      this.trelloObj = boardData;
      _ref = boardData.members;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        memberData = _ref[_i];
        this.members.push(new Member(memberData));
      }
      _ref1 = boardData.labels;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        labelData = _ref1[_j];
        this.labels.push(new Label(labelData));
      }
      this.makeReadyLists((function(_this) {
        return function() {
          return onReady(_this);
        };
      })(this));
      this;
    }

    Board.prototype.makeReadyLists = function(onReady) {
      var listData, _i, _len, _ref;
      _ref = this.trelloObj.lists;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        listData = _ref[_i];
        this.lists.push(new List(listData, this));
      }
      return onReady();
    };

    Board.prototype.getList = function(id) {
      var list, _i, _len, _ref;
      if (typeof id === "string") {
        _ref = this.lists;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          list = _ref[_i];
          if (list.name === id) {
            return list;
          }
        }
        return void 0;
      }
      return this.lists[id];
    };

    Board.prototype.eachList = function(eachFunc) {
      var list, _i, _len, _ref;
      _ref = this.lists;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        list = _ref[_i];
        eachFunc(list);
      }
      return this;
    };

    Board.prototype.getCard = function(id) {
      var ret;
      ret = void 0;
      this.eachList(function(list) {
        var card, _i, _len, _ref, _results;
        _ref = list.cards;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          card = _ref[_i];
          if (card.id === id) {
            _results.push(ret = card);
          }
        }
        return _results;
      });
      return ret;
    };

    Board.prototype.getMember = function(id) {
      var member, _i, _len, _ref;
      if (typeof id === "string") {
        _ref = this.members;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          member = _ref[_i];
          if (member.id === id) {
            return member;
          }
        }
        return void 0;
      }
      return this.members[id];
    };

    Board.prototype.getMemberByUsername = function(username) {
      var member, _i, _len, _ref;
      _ref = this.members;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        member = _ref[_i];
        if (member.username === username) {
          return member;
        }
      }
      return void 0;
    };

    Board.prototype.eachMember = function(eachFunc) {
      var member, _i, _len, _ref;
      _ref = this.members;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        member = _ref[_i];
        eachFunc(member);
      }
      return this;
    };

    Board.prototype.getLabel = function(id) {
      var label, _i, _len, _ref;
      if (typeof id === "string") {
        _ref = this.labels;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          label = _ref[_i];
          if (label.id === id) {
            return label;
          }
        }
        return void 0;
      }
      return this.labels[id];
    };

    Board.prototype.getLabelByColor = function(color) {
      var label, _i, _len, _ref;
      _ref = this.labels;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        label = _ref[_i];
        if (label.color === color) {
          return label;
        }
      }
      return void 0;
    };

    Board.prototype.getLabelByName = function(name) {
      var label, _i, _len, _ref;
      _ref = this.labels;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        label = _ref[_i];
        if (label.name === name) {
          return label;
        }
      }
      return void 0;
    };

    Board.prototype.eachLabel = function(eachFunc) {
      var label, _i, _len, _ref;
      _ref = this.labels;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        label = _ref[_i];
        eachFunc(label);
      }
      return this;
    };

    Board.prototype.addList = function(name, params, onSuccess) {
      var API;
      if (params == null) {
        params = {};
      }
      if (onSuccess == null) {
        onSuccess = function() {};
      }
      if (typeof params === "function") {
        onSuccess = params;
        params = {};
      }
      params.name = name;
      params.idBoard = this.id;
      API = new api("/lists", params);
      return API.run("POST", (function(_this) {
        return function(listData) {
          return _this.board.refresh(function() {
            return onSuccess(_this.getList(listData.id));
          });
        };
      })(this));
    };

    Board.prototype.refresh = function(onSuccess) {
      var API;
      if (onSuccess == null) {
        onSuccess = function() {};
      }
      API = new api("/boards/" + this.id, {
        lists: "open",
        members: "all",
        member_fields: "all",
        list_fields: "all",
        fields: "name",
        labels: "all",
        label_fields: "all",
        cards: "open",
        card_fields: "all"
      });
      API.run("GET", (function(_this) {
        return function(boardData) {
          return _this.constructor(boardData, function(board) {
            return onSuccess(board);
          });
        };
      })(this));
      return this;
    };

    return Board;

  })();

}).call(this);
